{"remainingRequest":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/babel-loader/lib/index.js!/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/eslint-loader/index.js??ref--12-0!/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/src/server.js","dependencies":[{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/src/server.js","mtime":1633848681591},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gc3JjL3NlcnZlci5qcwppbXBvcnQgeyBjcmVhdGVTZXJ2ZXIsIE1vZGVsLCBSZXNwb25zZSB9IGZyb20gIm1pcmFnZWpzIjsKaW1wb3J0IHsgcG9zdEJ1aWxkZXIgfSBmcm9tICcuL3N0dWJzL2J1aWxkZXJzJzsKZXhwb3J0IGZ1bmN0aW9uIG1ha2VTZXJ2ZXIoewogIGVudmlyb25tZW50ID0gImRldmVsb3BtZW50Igp9ID0ge30pIHsKICBsZXQgc2VydmVyID0gY3JlYXRlU2VydmVyKHsKICAgIGVudmlyb25tZW50LAogICAgbW9kZWxzOiB7CiAgICAgIHVzZXI6IE1vZGVsCiAgICB9LAoKICAgIHNlZWRzKHNlcnZlcikgewogICAgICBzZXJ2ZXIuY3JlYXRlKCJ1c2VyIiwgewogICAgICAgIG5hbWU6ICJCb2IiCiAgICAgIH0pOwogICAgICBzZXJ2ZXIuY3JlYXRlKCJ1c2VyIiwgewogICAgICAgIG5hbWU6ICJBbGljZSIKICAgICAgfSk7CiAgICB9LAoKICAgIHJvdXRlcygpIHsKICAgICAgdGhpcy51cmxQcmVmaXggPSAiaHR0cDovL2xvY2FsaG9zdDo4MDgwIjsKICAgICAgdGhpcy5nZXQoIi91c2VycyIsIHNjaGVtYSA9PiB7CiAgICAgICAgcmV0dXJuIHNjaGVtYS51c2Vycy5hbGwoKTsKICAgICAgfSk7CiAgICAgIHRoaXMucG9zdCgiL2FwaS9sb2dpbiIsICgpID0+IHsKICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKDIwMCwge30sIHsKICAgICAgICAgIG1lc3NhZ2U6ICJsb2dpbiBzdWNjZXNzZnVsIgogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgdGhpcy5wb3N0KCIvYXBpL3NpZ251cCIsIChzY2hlbWEsIHJlcSkgPT4gewogICAgICAgIGxldCBhdHRycyA9IEpTT04ucGFyc2UocmVxLnJlcXVlc3RCb2R5KTsKICAgICAgICBjb25zb2xlLmxvZyhhdHRycyk7CiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZSgyMDAsIHt9LCB7CiAgICAgICAgICBtZXNzYWdlOiAic2lnbnVwIHN1Y2Nlc3NmdWwiCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB0aGlzLmdldCgiL3Bvc3RzIiwgKHNjaGVtYSwgcmVxKSA9PiB7CiAgICAgICAgY29uc3QgW3Bvc3QxLCBwb3N0Ml0gPSBbcG9zdEJ1aWxkZXIoKSwgcG9zdEJ1aWxkZXIoKV07CiAgICAgICAgbGV0IHBvc3RzID0gQXJyYXkoMik7CiAgICAgICAgcG9zdHMgPSBbcG9zdDEsIHBvc3QyXTsKICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKDIwMCwge30sIHBvc3RzKTsKICAgICAgfSk7CiAgICB9CgogIH0pOwogIHJldHVybiBzZXJ2ZXI7Cn0="},{"version":3,"sources":["/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/src/server.js"],"names":["createServer","Model","Response","postBuilder","makeServer","environment","server","models","user","seeds","create","name","routes","urlPrefix","get","schema","users","all","post","message","req","attrs","JSON","parse","requestBody","console","log","post1","post2","posts","Array"],"mappings":"AAAA;AACA,SAASA,YAAT,EAAuBC,KAAvB,EAA8BC,QAA9B,QAA8C,UAA9C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,SAASC,UAAT,CAAoB;AAAEC,EAAAA,WAAW,GAAG;AAAhB,IAAkC,EAAtD,EAA0D;AAC/D,MAAIC,MAAM,GAAGN,YAAY,CAAC;AACxBK,IAAAA,WADwB;AAGxBE,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEP;AADA,KAHgB;;AAOxBQ,IAAAA,KAAK,CAACH,MAAD,EAAS;AACZA,MAAAA,MAAM,CAACI,MAAP,CAAc,MAAd,EAAsB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAtB;AACAL,MAAAA,MAAM,CAACI,MAAP,CAAc,MAAd,EAAsB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAtB;AACD,KAVuB;;AAYxBC,IAAAA,MAAM,GAAG;AACP,WAAKC,SAAL,GAAiB,uBAAjB;AAEA,WAAKC,GAAL,CAAS,QAAT,EAAoBC,MAAD,IAAY;AAC7B,eAAOA,MAAM,CAACC,KAAP,CAAaC,GAAb,EAAP;AACD,OAFD;AAGA,WAAKC,IAAL,CAAU,YAAV,EAAwB,MAAM;AAC5B,eAAO,IAAIhB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AACzBiB,UAAAA,OAAO,EAAE;AADgB,SAAtB,CAAP;AAGD,OAJD;AAKA,WAAKD,IAAL,CAAU,aAAV,EAAyB,CAACH,MAAD,EAASK,GAAT,KAAiB;AACxC,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,WAAf,CAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,eAAO,IAAInB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AACzBiB,UAAAA,OAAO,EAAE;AADgB,SAAtB,CAAP;AAGD,OAND;AAOA,WAAKL,GAAL,CAAS,QAAT,EAAmB,CAACC,MAAD,EAASK,GAAT,KAAiB;AAClC,cAAM,CAACO,KAAD,EAAQC,KAAR,IAAiB,CAACzB,WAAW,EAAZ,EAAgBA,WAAW,EAA3B,CAAvB;AACA,YAAI0B,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAjB;AACAD,QAAAA,KAAK,GAAG,CAACF,KAAD,EAAQC,KAAR,CAAR;AACA,eAAO,IAAI1B,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB2B,KAAtB,CAAP;AACD,OALD;AAMD;;AApCuB,GAAD,CAAzB;AAuCA,SAAOvB,MAAP;AACD","sourcesContent":["// src/server.js\nimport { createServer, Model, Response } from \"miragejs\"\nimport { postBuilder } from './stubs/builders'\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  let server = createServer({\n    environment,\n\n    models: {\n      user: Model,\n    },\n\n    seeds(server) {\n      server.create(\"user\", { name: \"Bob\" })\n      server.create(\"user\", { name: \"Alice\" })\n    },\n\n    routes() {\n      this.urlPrefix = \"http://localhost:8080\"\n\n      this.get(\"/users\", (schema) => {\n        return schema.users.all()\n      });\n      this.post(\"/api/login\", () => {\n        return new Response(200, {}, {\n            message: \"login successful\"\n        })\n      });\n      this.post(\"/api/signup\", (schema, req) => {\n        let attrs = JSON.parse(req.requestBody)\n        console.log(attrs);\n        return new Response(200, {}, {\n            message: \"signup successful\"\n        })\n      });\n      this.get(\"/posts\", (schema, req) => {\n        const [post1, post2] = [postBuilder(), postBuilder()]; \n        let posts = Array(2);\n        posts = [post1, post2]\n        return new Response(200, {}, posts)\n      })\n    },\n  })\n\n  return server\n}"]}]}