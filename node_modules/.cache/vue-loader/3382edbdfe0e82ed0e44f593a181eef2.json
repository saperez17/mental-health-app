{"remainingRequest":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/src/components/ContentFeed/components/Post.vue?vue&type=style&index=0&id=6a1b1541&scoped=true&lang=css&","dependencies":[{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/src/components/ContentFeed/components/Post.vue","mtime":1634286874614},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/usuario/Desktop/SoftwareDEV/MisionTIC/mental-health-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi53cmFwcGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgLyogYmFja2dyb3VuZC1jb2xvcjogI2U3ZjVmZjsgKi8KICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjZGZmOWZkIDsgKi8KICBwYWRkaW5nOiAwLjVyZW07CiAgYm9yZGVyLXJhZGl1czogMC41cmVtOwogIG1hcmdpbi1ib3R0b206IDJyZW07Cn0KCi53cmFwcGVyIC5wb3N0LWF2YXRhciB7CiAgZGlzcGxheTogZmxleDsKICBnYXA6IDFyZW07Cn0KCi5pbmZvIC5kYXRlIHsKICBmb250LXNpemU6IDAuOHJlbTsKfQoud3JhcHBlciAucG9zdC1jb250ZW50IHsKICBtYXJnaW46IDAuNXJlbSAwLjVyZW07CiAgd2lkdGg6IDkwJTsKfQouYWN0aW9uLWljb25zIHsKICBtYXJnaW4tdG9wOiAwLjVyZW07CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0KLmFjdGlvbi1pY29ucyA6Zmlyc3QtY2hpbGQgewogIG1hcmdpbi1yaWdodDogMC4ycmVtOwp9Ci5wb3N0LWNvbW1lbnRzIHsKICBkaXNwbGF5OiBmbGV4OwogIG1hcmdpbi1sZWZ0OiAxcmVtOwogIG1hcmdpbi10b3A6IDFyZW07Cn0KLmNvbW1lbnQgewogIGZsZXg6IDE7CiAgYm9yZGVyOiAxcHggc29saWQgI2VkZTllOTsKICBkaXNwbGF5OiB0YWJsZS1jZWxsOwogIG1hcmdpbi1sZWZ0OiAyMHB4OwogIG1hcmdpbi1yaWdodDogMXJlbTsKICBwYWRkaW5nOiAxMHB4OwogIHZlcnRpY2FsLWFsaWduOiB0b3A7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHdpZHRoOiA2NSU7Cn0KLnVzZXJuYW1lIHsKICBmb250LXdlaWdodDogYm9sZDsKfQouY29tbWVudC10eHQgewogIGZvbnQtc2l6ZTogMC45cmVtOwogIGNvbG9yOiAjNTc1NzU3Owp9Ci5jb21tZW50OjpiZWZvcmUgewogIGJvcmRlci1ib3R0b206IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgYm9yZGVyLXJpZ2h0OiAxMXB4IHNvbGlkICNlZGU5ZTk7CiAgYm9yZGVyLXRvcDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDsKICBsZWZ0OiAtMTFweDsKICB0b3A6IDEwcHg7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGNvbnRlbnQ6ICIiOwp9Ci5jb21tZW50OjphZnRlciB7CiAgYm9yZGVyLWJvdHRvbTogOHB4IHNvbGlkIHRyYW5zcGFyZW50OwogIGJvcmRlci1yaWdodDogOXB4IHNvbGlkICNmZmY7CiAgYm9yZGVyLXRvcDogOHB4IHNvbGlkIHRyYW5zcGFyZW50OwogIGxlZnQ6IC05cHg7CiAgdG9wOiAxMnB4OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBjb250ZW50OiAiIjsKfQoucG9zdC1jb21tZW50cyA+IC5jb21tZW50IHsKICBjb2xvcjogIzcwNzA3MDsKfQoKLyogaWNvbnMgKi8KLmJpLXN1aXQtaGVhcnQtZmlsbCA+ICogewogIGN1cnNvcjogcG9pbnRlcjsKICB0cmFuc2l0aW9uOiBhbGwgMnM7CiAgZm9udC1zaXplOiAxcmVtOwogIC8qIGNvbG9yOiByZ2IoMTQ2LCAxMCwgMTApOyAqLwp9Ci5ub3Qtdm90ZWQgewogIGNvbG9yOiByZ2IoMjA2LCAyMDYsIDIwNikgIWltcG9ydGFudDsKfQoudm90ZWQgewogIGNvbG9yOiByZ2IoMjAxLCA2OSwgNjkpOwp9Ci5iaS1zdWl0LWhlYXJ0LWZpbGw6aG92ZXIgewogIHRyYW5zaXRpb246IGFsbCAxczsKICBmb250LXNpemU6IDEuNXJlbTsKfQoKLyogRWRpdCBQb3N0IEljb24gKi8KLmJpLXRocmVlLWRvdHMgewogIGN1cnNvcjogcG9pbnRlcjsKfQoKLmNvbW1lbnQtcG9zdC1hY3Rpb24td3JhcHBlciB7CiAgLyogd2lkdGg6IDIwJTsgKi8KfQo="},{"version":3,"sources":["Post.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Post.vue","sourceRoot":"src/components/ContentFeed/components","sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div class=\"post-avatar\">\n      <div class=\"d-flex justify-content-center align-items-center\">\n        <span @click=\"goToProfileHandler\"><b-avatar text=\"BV\"></b-avatar></span>\n      </div>\n      <div class=\"info d-flex flex-column align-items-start\">\n        <p class=\"username m-0\">@{{ currentPost.user.username }}</p>\n\n        <p class=\"date font-weight-lighter\">\n          {{ formatString(currentPost.created_at) }}\n        </p>\n      </div>\n      <b-icon-three-dots @click=\"editPost()\" />\n    </div>\n    <div class=\"post-content pl-5\">\n      <p v-if=\"!editable\" class=\"comment-txt\">\n        {{ currentPost.content }}\n      </p>\n      <textarea\n        v-else\n        v-model=\"currentPost.content\"\n        v-on:keyup.enter=\"updatePost()\"\n      ></textarea>\n      <div class=\"action-icons\">\n        <div>\n          1\n          <b-icon-chat @click=\"newCommentHandler\" />\n        </div>\n        <div class=\"d-flex ml-2\">\n          {{ currentPost.likes.length }}\n          <div class=\"ml-1\" v-bind:class=\"[votedPost ? 'voted' : 'not-voted']\">\n            <b-icon-suit-heart-fill @click=\"vote(currentPost.id)\" />\n          </div>\n        </div>\n      </div>\n      <div v-if=\"isCommenting\">\n        <div class=\"form-group\">\n          <input\n            class=\"form-control form-control-sm\"\n            type=\"text\"\n            placeholder=\"new comment..\"\n            v-model=\"newComment\"\n          />\n        </div>\n        <div class=\"d-flex flex-column justify-content-end align-items-end\">\n          <div class=\"comment-post-action-wrapper d-flex flex-row\">\n            <b-button\n              size=\"sm\"\n              pill\n              variant=\"primary\"\n              class=\"mr-2\"\n              @click=\"sendCommentHandler\"\n              >Send</b-button\n            >\n            <b-button\n              size=\"sm\"\n              pill\n              variant=\"outline-danger\"\n              @click=\"newCommentHandler\"\n              >X</b-button\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"post-comments\"\n      v-for=\"comment in currentPost.comments\"\n      :key=\"comment.id\"\n    >\n      <b-avatar class=\"icon\"></b-avatar>\n      <div class=\"comment\">\n        <p class=\"\">@{{ comment.author }}</p>\n        <p class=\"comment-txt\">{{ comment.content }}</p>\n      </div>\n    </div>\n\n    <div class=\"overflow-auto\"></div>\n  </div>\n</template>\n\n<script>\nimport { getFromLocal } from \"@/utils/localStorage\";\nimport { updatePost } from \"@/services/post\";\nexport default {\n  name: \"Post\",\n  data() {\n    return {\n      items: [\n        { id: 1, message: \"Hello bro!\" },\n        { id: 2, message: \"Yet another comment\" },\n      ],\n      votedPost: false,\n      editable: false,\n      isCommenting: false,\n      newComment: \"\",\n    };\n  },\n  computed: {\n    userId() {\n      const userId = getFromLocal(\"user\").user.id;\n      return userId;\n    },\n    user() {\n      return getFromLocal(\"user\");\n    },\n    currentPost() {\n      const currentPost = this.$store.state.posts.filter((post) => {\n        return post.id.trim() == this.$props.data.id.trim() ? post : null;\n      });\n\n      return currentPost.length !== 0 ? currentPost[0] : null;\n    },\n  },\n\n  props: [\"data\"],\n  created() {\n    const canEditPost = this.determinePostOwnership();\n    if (canEditPost) {\n      // this.editable = true;\n    }\n    const hasLiked = this.$props.data.likes.find(\n      (userId) => userId == this.userId\n    );\n    if (hasLiked) {\n      this.votedPost = true;\n    }\n  },\n  mounted() {},\n  methods: {\n    vote(id) {\n      if (!this.votedPost) {\n        this.votedPost = !this.votedPost;\n        const newLikesArray = this.$props.data.likes.concat(this.userId);\n        updatePost({\n          newPostData: { likes: newLikesArray },\n          postId: this.$props.data.id,\n        }).then((res) => {\n          this.$store.dispatch(\"votePost\", { updatedPost: res.data });\n          // console.log('res',res);\n          // this.$store.dispatch(\"updatePost\", res.data);\n        });\n      } else {\n        const newLikesArray = this.$props.data.likes.filter(\n          (like) => like !== this.userId\n        );\n        updatePost({\n          newPostData: { likes: newLikesArray },\n          postId: this.$props.data.id,\n        }).then((res) => {\n          // console.log('downvoted post resul', res.data);\n          this.$store.dispatch(\"updatePost\", res.data);\n          this.votedPost = false;\n        });\n      }\n    },\n    editPost() {\n      const canEditPost = this.determinePostOwnership();\n      if (canEditPost) {\n        this.editable = !this.editable;\n      }\n    },\n    updatePost() {\n      const newPostContent = this.$props.data.content.replace(\"\\n\", \"\");\n      updatePost({\n        newPostData: { content: newPostContent },\n        postId: this.$props.data.id,\n      }).then((res) => {\n        this.$store.dispatch(\"updatePost\", res.data);\n        this.editable = false;\n      });\n    },\n    determinePostOwnership() {\n      const ownershipResult =\n        this.$props.data.user.id.trim() == this.userId.trim() ? true : false;\n      return ownershipResult;\n    },\n    hasVotedPost() {\n      const hasLiked = this.$props.data.likes.find(\n        (userId) => userId == this.userId\n      );\n      return hasLiked !== undefined ? true : false;\n    },\n    newCommentHandler() {\n      this.isCommenting = !this.isCommenting;\n    },\n    sendCommentHandler() {\n      updatePost({\n        newPostData: {\n          newComment: {\n            comment: this.newComment,\n            author: this.user.user.username,\n          },\n        },\n        postId: this.$props.data.id,\n      }).then((res) => {\n        this.$store.dispatch(\"updatePost\", res.data);\n      });\n    },\n    formatString(stringDate) {\n      var options = { year: \"numeric\", month: \"short\", day: \"numeric\" };\n      let postDate = new Date(stringDate);\n      return postDate.toLocaleDateString(\"en-US\", options);\n    },\n    goToProfileHandler() {\n      console.log(\"searching profile\");\n      this.$router.push({ path: `profile`, params:{id: this.currentPost.user.id} });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  /* background-color: #e7f5ff; */\n  /* background-color: #dff9fd ; */\n  padding: 0.5rem;\n  border-radius: 0.5rem;\n  margin-bottom: 2rem;\n}\n\n.wrapper .post-avatar {\n  display: flex;\n  gap: 1rem;\n}\n\n.info .date {\n  font-size: 0.8rem;\n}\n.wrapper .post-content {\n  margin: 0.5rem 0.5rem;\n  width: 90%;\n}\n.action-icons {\n  margin-top: 0.5rem;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n}\n.action-icons :first-child {\n  margin-right: 0.2rem;\n}\n.post-comments {\n  display: flex;\n  margin-left: 1rem;\n  margin-top: 1rem;\n}\n.comment {\n  flex: 1;\n  border: 1px solid #ede9e9;\n  display: table-cell;\n  margin-left: 20px;\n  margin-right: 1rem;\n  padding: 10px;\n  vertical-align: top;\n  position: relative;\n  width: 65%;\n}\n.username {\n  font-weight: bold;\n}\n.comment-txt {\n  font-size: 0.9rem;\n  color: #575757;\n}\n.comment::before {\n  border-bottom: 10px solid transparent;\n  border-right: 11px solid #ede9e9;\n  border-top: 10px solid transparent;\n  left: -11px;\n  top: 10px;\n  position: absolute;\n  content: \"\";\n}\n.comment::after {\n  border-bottom: 8px solid transparent;\n  border-right: 9px solid #fff;\n  border-top: 8px solid transparent;\n  left: -9px;\n  top: 12px;\n  position: absolute;\n  content: \"\";\n}\n.post-comments > .comment {\n  color: #707070;\n}\n\n/* icons */\n.bi-suit-heart-fill > * {\n  cursor: pointer;\n  transition: all 2s;\n  font-size: 1rem;\n  /* color: rgb(146, 10, 10); */\n}\n.not-voted {\n  color: rgb(206, 206, 206) !important;\n}\n.voted {\n  color: rgb(201, 69, 69);\n}\n.bi-suit-heart-fill:hover {\n  transition: all 1s;\n  font-size: 1.5rem;\n}\n\n/* Edit Post Icon */\n.bi-three-dots {\n  cursor: pointer;\n}\n\n.comment-post-action-wrapper {\n  /* width: 20%; */\n}\n</style>\n"]}]}